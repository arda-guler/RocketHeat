import analysis
import os
import sys
import time

def clear_cmd_terminal():
    if os.name == "nt":
        os.system("cls")
    else:
        os.system("clear")

def n_cochan(i, start, incr):
    return str(start + i * incr)

def sidewallwidth(i, start, incr):
    return str(start + i * incr)

def cochandepth(i, start, incr):
    return str(start + i * incr)

def generate_file(i, cochan_depth_start, cochan_depth_incr, side_wall_width_start, side_wall_width_incr,
                  n_cochan_start, n_cochan_incr, base_file):

    inf = open(base_file, "r")
    infl = inf.readlines()
    
    filename = "inputs//" + base_file.split(".")[0] + "-" + str(i) + ".txt"
    write_str = infl[0]
    write_str += infl[1]
    write_str += infl[2]
    write_str += infl[3]
    write_str += infl[4]
    write_str += infl[5]
    write_str += infl[6]
    write_str += infl[7]
    write_str += infl[8]
    write_str += "AUTO: Num. of coolant channels: " + n_cochan(i, n_cochan_start, n_cochan_incr) + "\n"
    write_str += infl[10]
    write_str += "AUTO: Coolant channel side wall width (m): " + sidewallwidth(i, side_wall_width_start, side_wall_width_incr) + "\n"
    write_str += "AUTO: Coolant channel depth (m): " + cochandepth(i, cochan_depth_start, cochan_depth_incr) + "\n"
    write_str += infl[13]
    write_str += infl[14]
    write_str += infl[15]
    write_str += infl[16]
    write_str += infl[17]
    write_str += infl[18]
    write_str += infl[19]
    write_str += infl[20]
    write_str += infl[21]
    write_str += infl[22]
    write_str += infl[23]
    write_str += infl[24]
    write_str += infl[25]
    write_str += infl[26]
    write_str += infl[27]
    write_str += infl[28]
    write_str += infl[29]
    write_str += infl[30]
    write_str += "\nNOTE: THIS INPUT FILE WAS GENERATED BY THE AUTO-ANALYSIS TOOL.\n"
    
    with open(filename, "w") as f:
        f.write(write_str)

    inf.close()
    return filename

def auto_analyze():
    clear_cmd_terminal()
    print("= = = THERMAL AUTO-ANALYSIS = = =\n")
    n_analysis = int(input("Num. of analysis steps: "))

    base_file = None
    
    while not base_file or not os.path.exists(base_file):
        base_file = input("Enter the text file that contains engine parameters: ")
        if not base_file.endswith(".txt"):
            base_file += ".txt"

        if not os.path.exists(base_file):
            print("File not found!\n")

    print("")
    cochan_depth_start = float((input("Coolant channel depth - start parameter (mm): ")))/1000
    cochan_depth_incr = float((input("Coolant channel depth - step increment (mm): ")))/1000
    print("")
    side_wall_width_start = float(input("Channel wall width - start parameter (mm): "))/1000
    side_wall_width_incr = float(input("Channel wall width - step increment (mm): "))/1000
    print("")
    n_cochan_start = int(input("Number of coolant channels - start parameter: "))
    n_cochan_incr = int(input("Number of coolant channels - increment: "))
    
    for i in range(n_analysis):
        clear_cmd_terminal()
        print("\nANALYSIS #" + str(i) + "\n\n")
        percent = i/n_analysis * 100
        print("Preparing next analysis...")
        filename = generate_file(i, cochan_depth_start, cochan_depth_incr, side_wall_width_start, side_wall_width_incr,
                                 n_cochan_start, n_cochan_incr, base_file)

        if not i == (n_analysis - 1):
            getchar = False
        else:
            getchar = True
            
        analysis.perform(filename, getchar, True, percent)
    
